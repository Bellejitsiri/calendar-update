var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import Select from 'react-select';
import spacetime from 'spacetime';
import soft from 'timezone-soft';
import allTimezones from './timezone-list';
export var LabelType;
(function (LabelType) {
    LabelType["ORIGINAL"] = "original";
    LabelType["ALTNAME"] = "altName";
    LabelType["ABBREV"] = "abbrev";
})(LabelType || (LabelType = {}));
export { allTimezones };
export default function TimezoneSelect(_a) {
    var { value, onBlur, onChange, labelStyle = 'original', timezones } = _a, props = __rest(_a, ["value", "onBlur", "onChange", "labelStyle", "timezones"]);
    if (!timezones)
        timezones = allTimezones;
    const getOptions = React.useMemo(() => {
        return Object.entries(timezones)
            .reduce((selectOptions, zone) => {
            var _a, _b, _c, _d;
            const now = spacetime.now(zone[0]);
            const tz = now.timezone();
            const tzStrings = soft(zone[0]);
            let label = '';
            let abbr = now.isDST()
                ? // @ts-expect-error
                    (_a = tzStrings[0].daylight) === null || _a === void 0 ? void 0 : _a.abbr
                : // @ts-expect-error
                    (_b = tzStrings[0].standard) === null || _b === void 0 ? void 0 : _b.abbr;
            let altName = now.isDST()
                ? (_c = tzStrings[0].daylight) === null || _c === void 0 ? void 0 : _c.name
                : (_d = tzStrings[0].standard) === null || _d === void 0 ? void 0 : _d.name;
            const min = tz.current.offset * 60;
            const hr = `${(min / 60) ^ 0}:` + (min % 60 === 0 ? '00' : Math.abs(min % 60));
            const prefix = `(GMT${hr.includes('-') ? hr : `+${hr}`}) ${zone[1]}`;
            switch (labelStyle) {
                case 'original':
                    label = prefix;
                    break;
                case 'altName':
                    label = `${prefix} ${(altName === null || altName === void 0 ? void 0 : altName.length) ? `(${altName})` : ''}`;
                    break;
                case 'abbrev':
                    label = `${prefix} ${(abbr === null || abbr === void 0 ? void 0 : abbr.length) < 5 ? `(${abbr})` : ''}`;
                    break;
                default:
                    label = `${prefix}`;
            }
            selectOptions.push({
                value: tz.name,
                label: label,
                offset: tz.current.offset,
                abbrev: abbr,
                altName: altName,
            });
            return selectOptions;
        }, [])
            .sort((a, b) => a.offset - b.offset);
    }, [labelStyle, timezones]);
    const handleChange = (tz) => {
        onChange && onChange(tz);
    };
    const findFuzzyTz = (zone) => {
        let currentTime = spacetime.now('GMT');
        try {
            currentTime = spacetime.now(zone);
        }
        catch (err) {
            return;
        }
        return getOptions
            .filter((tz) => tz.offset === currentTime.timezone().current.offset)
            .map((tz) => {
            let score = 0;
            if (currentTime.timezones[tz.value.toLowerCase()] &&
                !!currentTime.timezones[tz.value.toLowerCase()].dst ===
                    currentTime.timezone().hasDst) {
                if (tz.value
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(currentTime.tz.indexOf('/') + 1)) !== -1) {
                    score += 8;
                }
                if (tz.label
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(currentTime.tz.indexOf('/') + 1)) !== -1) {
                    score += 4;
                }
                if (tz.value
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(0, currentTime.tz.indexOf('/')))) {
                    score += 2;
                }
                score += 1;
            }
            else if (tz.value === 'GMT') {
                score += 1;
            }
            return { tz, score };
        })
            .sort((a, b) => b.score - a.score)
            .map(({ tz }) => tz)[0];
    };
    const parseTimezone = (zone) => {
        if (typeof zone === 'object' && zone.value && zone.label)
            return zone;
        if (typeof zone === 'string') {
            return (getOptions.find(tz => tz.value === zone) ||
                (zone.indexOf('/') !== -1 && findFuzzyTz(zone)));
        }
        else if (zone.value && !zone.label) {
            return getOptions.find(tz => tz.value === zone.value);
        }
    };
    return (React.createElement(Select, Object.assign({ value: parseTimezone(value), onChange: handleChange, options: getOptions, onBlur: onBlur }, props)));
}
//# sourceMappingURL=index.js.map
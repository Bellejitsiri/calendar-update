"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.allTimezones = exports.LabelType = void 0;
var react_1 = require("react");
var react_select_1 = __importDefault(require("react-select"));
var spacetime_1 = __importDefault(require("spacetime"));
var timezone_soft_1 = __importDefault(require("timezone-soft"));
var timezone_list_1 = __importDefault(require("./timezone-list"));
exports.allTimezones = timezone_list_1["default"];
var LabelType;
(function (LabelType) {
    LabelType["ORIGINAL"] = "original";
    LabelType["ALTNAME"] = "altName";
    LabelType["ABBREV"] = "abbrev";
})(LabelType = exports.LabelType || (exports.LabelType = {}));
function TimezoneSelect(_a) {
    var value = _a.value, onBlur = _a.onBlur, onChange = _a.onChange, _b = _a.labelStyle, labelStyle = _b === void 0 ? 'original' : _b, timezones = _a.timezones, props = __rest(_a, ["value", "onBlur", "onChange", "labelStyle", "timezones"]);
    if (!timezones)
        timezones = timezone_list_1["default"];
    var getOptions = (0, react_1.useMemo)(function () {
        return Object.entries(timezones)
            .reduce(function (selectOptions, zone) {
            var _a, _b, _c, _d;
            var now = spacetime_1["default"].now(zone[0]);
            var tz = now.timezone();
            var tzStrings = (0, timezone_soft_1["default"])(zone[0]);
            var label = '';
            var abbr = now.isDST()
                ? // @ts-expect-error
                    (_a = tzStrings[0].daylight) === null || _a === void 0 ? void 0 : _a.abbr
                : // @ts-expect-error
                    (_b = tzStrings[0].standard) === null || _b === void 0 ? void 0 : _b.abbr;
            var altName = now.isDST()
                ? (_c = tzStrings[0].daylight) === null || _c === void 0 ? void 0 : _c.name
                : (_d = tzStrings[0].standard) === null || _d === void 0 ? void 0 : _d.name;
            var min = tz.current.offset * 60;
            var hr = ((min / 60) ^ 0) + ":" + (min % 60 === 0 ? '00' : Math.abs(min % 60));
            var prefix = "(GMT" + (hr.includes('-') ? hr : "+" + hr) + ") " + zone[1];
            switch (labelStyle) {
                case 'original':
                    label = prefix;
                    break;
                case 'altName':
                    label = prefix + " " + ((altName === null || altName === void 0 ? void 0 : altName.length) ? "(" + altName + ")" : '');
                    break;
                case 'abbrev':
                    label = prefix + " " + ((abbr === null || abbr === void 0 ? void 0 : abbr.length) < 5 ? "(" + abbr + ")" : '');
                    break;
                default:
                    label = "" + prefix;
            }
            selectOptions.push({
                value: tz.name,
                label: label,
                offset: tz.current.offset,
                abbrev: abbr,
                altName: altName
            });
            return selectOptions;
        }, [])
            .sort(function (a, b) { return a.offset - b.offset; });
    }, [labelStyle, timezones]);
    var handleChange = function (tz) {
        onChange && onChange(tz);
    };
    var findFuzzyTz = function (zone) {
        var currentTime = spacetime_1["default"].now('GMT');
        try {
            currentTime = spacetime_1["default"].now(zone);
        }
        catch (err) {
            return;
        }
        return getOptions
            .filter(function (tz) {
            return tz.offset === currentTime.timezone().current.offset;
        })
            .map(function (tz) {
            var score = 0;
            if (currentTime.timezones[tz.value.toLowerCase()] &&
                !!currentTime.timezones[tz.value.toLowerCase()].dst ===
                    currentTime.timezone().hasDst) {
                if (tz.value
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(currentTime.tz.indexOf('/') + 1)) !== -1) {
                    score += 8;
                }
                if (tz.label
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(currentTime.tz.indexOf('/') + 1)) !== -1) {
                    score += 4;
                }
                if (tz.value
                    .toLowerCase()
                    .indexOf(currentTime.tz.substr(0, currentTime.tz.indexOf('/')))) {
                    score += 2;
                }
                score += 1;
            }
            else if (tz.value === 'GMT') {
                score += 1;
            }
            return { tz: tz, score: score };
        })
            .sort(function (a, b) { return b.score - a.score; })
            .map(function (_a) {
            var tz = _a.tz;
            return tz;
        })[0];
    };
    var parseTimezone = function (zone) {
        if (typeof zone === 'object' && zone.value && zone.label)
            return zone;
        if (typeof zone === 'string') {
            return (getOptions.find(function (tz) { return tz.value === zone; }) ||
                (zone.indexOf('/') !== -1 && findFuzzyTz(zone)));
        }
        else if (zone.value && !zone.label) {
            return getOptions.find(function (tz) { return tz.value === zone.value; });
        }
    };
    return (<react_select_1.default value={parseTimezone(value)} onChange={handleChange} options={getOptions} onBlur={onBlur} {...props}/>);
}
exports["default"] = TimezoneSelect;
//# sourceMappingURL=index.jsx.map
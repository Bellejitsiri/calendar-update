"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
var jsx_runtime_1 = require("react/jsx-runtime");
require("react");
var react_1 = require("@testing-library/react");
var index_1 = __importStar(require("../index"));
// react-select react-testing-library jest example tests:
// https://github.com/JedWatson/react-select/blob/master/packages/react-select/src/__tests__/Select.test.js
test("snapshot - defaults", function () {
    var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "Europe/Amsterdam", onChange: function (e) { return e; } }, void 0)).container;
    expect(container).toMatchSnapshot();
});
test("loads and displays default timezone - passing string", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "Europe/Amsterdam", onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT\+[1-2]:00\) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("loads and displays default timezone - passing full object", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: {
                value: "Europe/Amsterdam",
                label: "(GMT+1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"
            }, onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT\+[1-2]:00\) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("load and displays labelStyle - altName", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "America/Juneau", labelStyle: "altName", onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT-[8-9]:00\) Alaska \(Alaska (Daylight|Standard) Time\)$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("load and displays labelStyle - abbrev", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "America/Juneau", labelStyle: "abbrev", onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT-[8-9]:00\) Alaska \(AK[D|S]T\)$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("load and displays custom timezone", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "America/Lima", timezones: __assign(__assign({}, index_1.allTimezones), { "America/Lima": "Pittsburgh" }), onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT-[5-6]:00\) Pittsburgh$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("load and displays only 2 custom timezone choices", function () { return __awaiter(void 0, void 0, void 0, function () {
    var container, items;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                container = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "", timezones: {
                        "America/Lima": "Pittsburgh",
                        "Europe/Berlin": "Frankfurt"
                    }, menuIsOpen: true, onChange: function (e) { return e; } }, void 0)).container;
                return [4 /*yield*/, (0, react_1.findAllByText)(container, /^\(GMT[+-][0-9]{1,2}:[0-9]{2}/)];
            case 1:
                items = _a.sent();
                expect(items).toHaveLength(2);
                return [2 /*return*/];
        }
    });
}); });
test("load and passes react-select props", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "", timezones: __assign(__assign({}, index_1.allTimezones), { "America/Lima": "Pittsburgh" }), placeholder: "Please Select a Timezone", onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText("Please Select a Timezone")).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("can determine timezone by approximate match", function () { return __awaiter(void 0, void 0, void 0, function () {
    var getByText;
    return __generator(this, function (_a) {
        getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "Europe/Rome", onChange: function (e) { return e; } }, void 0)).getByText;
        expect(getByText(/\(GMT\+[1-2]:00\) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna$/)).toBeInTheDocument();
        return [2 /*return*/];
    });
}); });
test("select drop-downs must use the fireEvent.change", function () {
    var onChangeSpy = jest.fn();
    var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(index_1["default"], { value: "Europe/Amsterdam", onChange: onChangeSpy, menuIsOpen: true }, void 0)).container;
    var selectOption = __spreadArray([], container.querySelectorAll('div[id^="react-select"]'), true).find(function (n) { return n.textContent === "(GMT-10:00) Hawaii"; });
    react_1.fireEvent.click(selectOption);
    expect(onChangeSpy).toHaveBeenCalledTimes(1);
    expect(onChangeSpy).toHaveBeenCalledWith({
        value: "Pacific/Honolulu",
        label: "(GMT-10:00) Hawaii",
        altName: "Hawaii-Aleutian Standard Time",
        offset: -10,
        abbrev: "HAST"
    });
});
//# sourceMappingURL=TimezoneSelect.test.js.map
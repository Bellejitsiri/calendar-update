[{"D:\\panda\\calendar-update\\src\\index.js":"1","D:\\panda\\calendar-update\\src\\reportWebVitals.js":"2","D:\\panda\\calendar-update\\src\\App.js":"3","D:\\panda\\calendar-update\\src\\CustomCalendar.js":"4"},{"size":517,"mtime":1639976965948,"results":"5","hashOfConfig":"6"},{"size":375,"mtime":1639976965949,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1639976965947,"results":"8","hashOfConfig":"6"},{"size":22208,"mtime":1639980192918,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1b2xn8s",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\panda\\calendar-update\\src\\index.js",[],["20","21"],"D:\\panda\\calendar-update\\src\\reportWebVitals.js",[],"D:\\panda\\calendar-update\\src\\App.js",[],"D:\\panda\\calendar-update\\src\\CustomCalendar.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DatePicker, MuiPickersUtilsProvider, } from '@material-ui/pickers';\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CloudIcon from '@material-ui/icons/Cloud';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport * as echarts from 'echarts';\r\nimport dateFormat from 'dateformat';\r\nimport format from \"date-fns/format\";\r\n// import CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport Icon from \"@material-ui/core/Icon\";\r\n// import  ClockIcon from '@material-ui/icons/ClockIcon';\r\n// import { yearsToMonths, yearsToMonths } from 'date-fns';\r\nimport frLocale from \"date-fns/locale/fr\";\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/en-US\";\r\nimport jaLocale from \"date-fns/locale/ja\";\r\nimport koLocale from \"date-fns/locale/ko\";\r\nimport zhLocale from \"date-fns/locale/zh-CN\";\r\nimport thLocale from \"date-fns/locale/th\";\r\nimport arLocale from \"date-fns/locale/ar-DZ\";\r\nimport heLocale from \"date-fns/locale/he\";\r\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\r\nimport React, { useState, useCallback } from \"react\";\r\nimport { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport SelectTimezoneMaterialUi from 'input-material-ui';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport TimezoneSelect from \"react-timezone-select\"\r\nimport NumberFormat from 'react-number-format';\r\nimport { intlFormat } from \"date-fns\";\r\n// import TextField from 'material-ui/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { timezoneNames, ZonedDate } from \"@progress/kendo-date-math\";\r\nimport \"@progress/kendo-date-math/tz/all\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport PropTypes from 'prop-types';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Select from '@material-ui/core/Select';\r\nimport { height, width } from \"dom-helpers\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={4}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nvar number = 123456789;\r\nconsole.log(new Intl.NumberFormat('de-DE').format(number));\r\nconsole.log(new Intl.NumberFormat('ar-EG').format(number));\r\nconsole.log(new Intl.NumberFormat('zh-Hans-CN-u-nu-hanidec').format(number));\r\nconsole.log(new Intl.NumberFormat('th-TH').format(number));\r\nconst materialTheme = createMuiTheme({\r\n  overrides: {\r\n    MuiPickersToolbar: {\r\n      toolbar: {\r\n        backgroundColor: \"#1c2b36\",\r\n      },\r\n    },\r\n    MuiPickersCalendarHeader: {\r\n      switchHeader: {\r\n        backgroundColor: \"black\",\r\n        color: \"white\",\r\n      },\r\n      dayLabel: {\r\n        color: \"#61dafb\",\r\n      },\r\n      iconButton: {\r\n        backgroundColor: \"#2eaccf\",\r\n      },\r\n    },\r\n    MuiPaper: {\r\n      root: {\r\n        color: \"white\",\r\n        backgroundColor: \"#242f39\"\r\n      },\r\n    },\r\n    MuiPickersStaticWrapper: {\r\n      staticWrapperRoot: {\r\n        backgroundColor: \"#1c2b36\",\r\n      },\r\n    },\r\n    MuiIconButton: {\r\n      root: {\r\n        color: \"gray\",\r\n        padding: \"5px\",\r\n      },\r\n      label: {\r\n        name: \"\"\r\n      }\r\n    },\r\n    MuiSvgIcon: {\r\n      root: {\r\n        fontSize: \"1rem\",\r\n      },\r\n    },\r\n    MuiInputBase: {\r\n      input: {\r\n        color: \"white\",\r\n        background: \"#223542\",\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"#20bcd7\",\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      root: {\r\n        \"&$selected\": {\r\n          backgroundColor: \"#2a8697\",\r\n          color: \"black\",\r\n        },\r\n        \"&:hover\": {\r\n          backgroundColor: \"#54656a96\",\r\n        },\r\n      },\r\n    },\r\n    MuiMenuItem: {\r\n      root: {\r\n        \"&:hover\": {\r\n          backgroundColor: \"#54656a96\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const styles = makeStyles(() => ({\r\n\r\n  notInThisMonthDayPaper: {\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    backgroundColor: \"#0000003d\",\r\n    margin: \"3px\",\r\n    boxShadow: \"none\",\r\n    borderRadius: 0,\r\n    padding: \"1px\",\r\n  },\r\n  normalDayPaper: {\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    backgroundColor: \"#54656a52\",\r\n    margin: \"3px\",\r\n    // boxShadow: \"none\",\r\n    // borderRadius: 0,\r\n    padding: \"1px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  selectedDayPaper: {\r\n    width: \"31px\",\r\n    height: \"31px\",\r\n    backgroundColor: \"#3593af6b\",\r\n    margin: \"3px\",\r\n    boxShadow: \"none\",\r\n    borderRadius: 0,\r\n    borderStyle: \"solid\",\r\n    borderWidth: \"2px\",\r\n    borderColor: \"#20bcd7\",\r\n    padding: \"1px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  todayPaper: {\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    backgroundColor: \"#fff1cbcf\",\r\n    margin: \"3px\",\r\n    boxShadow: \"none\",\r\n    borderRadius: 0,\r\n    padding: \"1px\",\r\n    cursor: \"pointer\",\r\n    color: \"#1c2b36\",\r\n  },\r\n  notInThisMonthDayPaper5: {\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    margin: \"3px\",\r\n    padding: \"1px\",\r\n    boxShadow: \"none\",\r\n    // borderRadius: 0,\r\n    backgroundColor: \"#0000003d\",\r\n  },\r\n  timezoneSelect: {\r\n    // backgroundColor: \"#223542\",\r\n    // padding: \"20px\",\r\n    // margin: \"20px auto\",\r\n    borderRadius: \"5px\",\r\n    maxWidth: \"600px\",\r\n    margin: \"0 20px\",\r\n    fontWeight: 500,\r\n    fontFamily: \"tahoma\",\r\n    color: \"black\",\r\n  },\r\n  dialog:{\r\n    \"&.MuiDialog-paperFullWidth\":{\r\n      width: \"500rem\",\r\n      height:'100%'\r\n\r\n    },\r\n    input:{\r\n      \"&.MuiMenu-list \":{\r\n        width:'275rem'\r\n      }\r\n    }\r\n  },\r\n}));\r\n\r\nlet ScoreChartTemplate = ({ startDate, endDate }) => {\r\n\r\n\r\n  // Generate data for chart\r\n  let base = +new Date(2021, 1, 1);\r\n  let oneDay = 24 * 3600 * 1000;\r\n  let date = [];\r\n  let data = [Math.random() * 300];\r\n  for (let i = 1; i < 20000; i++) {\r\n    var now = new Date((base += oneDay));\r\n    date.push([now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'));\r\n    data.push(Math.round((Math.random() - 0.5) * 20 + data[i - 1]));\r\n  }\r\n\r\n  return {\r\n\r\n    //Area Chart\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      position: function (pt) {\r\n        return [pt[0], '10%'];\r\n      }\r\n    },\r\n    title: {\r\n      left: 'left',\r\n      text: 'Test Chart'\r\n    },\r\n    toolbox: {\r\n      feature: {\r\n        dataZoom: {\r\n          yAxisIndex: 'none'\r\n        },\r\n        restore: {},\r\n        saveAsImage: {}\r\n      }\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      boundaryGap: false,\r\n      data: date,\r\n      min: startDate,\r\n      max: endDate\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      boundaryGap: [0, '100%']\r\n    },\r\n    dataZoom: [\r\n      {\r\n        type: 'inside',\r\n        start: 0,\r\n        end: 10\r\n      },\r\n      {\r\n        start: 0,\r\n        end: 10\r\n      }\r\n    ],\r\n    series: [\r\n      {\r\n        name: 'Test Data',\r\n        type: 'line',\r\n        symbol: 'none',\r\n        sampling: 'lttb',\r\n        itemStyle: {\r\n          color: 'rgb(255, 70, 131)'\r\n        },\r\n        areaStyle: {\r\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            {\r\n              offset: 0,\r\n              color: 'rgb(255, 158, 68)'\r\n            },\r\n            {\r\n              offset: 1,\r\n              color: 'rgb(255, 70, 131)'\r\n            }\r\n          ])\r\n        },\r\n        data: data,\r\n      }\r\n\r\n    ]\r\n  }\r\n}\r\n\r\nexport default function CustomCalendar() {\r\n  const classes = styles();\r\n  const today = new Date();\r\n  const sunnyDays = [1, 6, 10, 24, 15]\r\n  const cloudyDays = [30, 4, 13, 21]\r\n  const snowyDays = [25, 3, 12, 11, 27]\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(new Date())\r\n  // const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\r\n    const isSunny = sunnyDays.includes(day.getDate());\r\n    const isCloudy = cloudyDays.includes(day.getDate());\r\n    const isSnow = snowyDays.includes(day.getDate());\r\n    const isSelected = day.getDate() === selectedDate.getDate();\r\n    const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\r\n    console.log(day.getTime())\r\n    let dateTile\r\n    if (isInCurrentMonth) {\r\n      if (isSunny) {\r\n        dateTile = (\r\n          <Paper\r\n            className={\r\n              isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper\r\n            }\r\n          >\r\n            <Grid item>\r\n              <WbSunnyIcon style={{ color: \"orange\" }} />\r\n            </Grid>\r\n            <Grid item>\r\n              {day.getDate()}\r\n            </Grid>\r\n          </Paper>)\r\n      } else if (isCloudy) {\r\n        dateTile = (<Paper\r\n          className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}\r\n        >\r\n          <Grid item>\r\n            <CloudIcon style={{ color: \"gray\" }} />\r\n\r\n          </Grid>\r\n          <Grid item> {day.getDate()}</Grid>\r\n        </Paper>)\r\n      } else if (isSnow) {\r\n        dateTile = (\r\n          <Paper\r\n            className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}\r\n          >\r\n            <Grid item>\r\n              <AcUnitIcon style={{ color: \"#3d5afe\" }} />\r\n            </Grid>\r\n            <Grid item> {day.getDate()}</Grid>\r\n          </Paper>\r\n        )\r\n      } else {\r\n        dateTile = (<Paper\r\n          className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}\r\n        >\r\n          <Grid item>\r\n            <br />\r\n          </Grid>\r\n          <Grid item> {day.getDate()}</Grid>\r\n        </Paper>)\r\n      }\r\n\r\n    } else {\r\n      dateTile = (<Paper className={classes.notInThisMonthDayPaper}>\r\n        <Grid item>\r\n          <br />\r\n        </Grid>\r\n        <Grid item style={{ color: \"lightGrey\" }}>\r\n          {day.getDate()}\r\n        </Grid>\r\n      </Paper>)\r\n    }\r\n    return dateTile\r\n  }\r\n  const localeMap = {\r\n    en: enLocale,\r\n    fr: frLocale,\r\n    ru: ruLocale,\r\n    ja: jaLocale,\r\n    ko: koLocale,\r\n    zh: zhLocale,\r\n    th: thLocale,\r\n    ar: arLocale,\r\n    he: heLocale,\r\n  };\r\n  class RuLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE dd MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class FrLocalizedUtils extends DateFnsUtils {\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"d MMM yyyy\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE dd MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class ThLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class JaLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class KoLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class ZhLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class ArLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  class HeLocalizedUtils extends DateFnsUtils {\r\n    getCalendarHeaderText(date) {\r\n      return format(date, \"LLLL\", { locale: this.locale });\r\n    }\r\n    getDatePickerHeaderText(date) {\r\n      return format(date, \"EEEE d MMMM yyyy\", { locale: this.locale });\r\n    }\r\n  }\r\n  const localeUtilsMap = {\r\n    en: DateFnsUtils,\r\n    fr: FrLocalizedUtils,\r\n    ru: RuLocalizedUtils,\r\n    ja: JaLocalizedUtils,\r\n    ko: KoLocalizedUtils,\r\n    zh: ZhLocalizedUtils,\r\n    th: ThLocalizedUtils,\r\n    ar: ArLocalizedUtils,\r\n    he: HeLocalizedUtils,\r\n\r\n  };\r\n  const [selectedTimezone, setSelectedTimezone] = useState({})\r\n  const [locale, setLocale] = useState(\"en\");\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleMenuOpen = useCallback(e => {\r\n    //e.stopPropagation();\r\n    console.log(\"e.currentTarget;;\", e.currentTarget)\r\n    setAnchorEl(e.currentTarget);\r\n  }, []);\r\n\r\n  const selectLocale = useCallback(locale => {\r\n    setLocale(locale);\r\n    setAnchorEl(null);\r\n  }, []);\r\n\r\n  const localeFormatMap = {\r\n    en: \"MMMM d, yyyy\",\r\n    fr: \"d MMM yyyy\",\r\n    ru: \"d MMM yyyy\",\r\n    ja: \"yyyy MMM d\",\r\n    ko: \"yyyy MMM d\",\r\n    zh: \"yyyy MMM d\",\r\n    th: \"EEEE d MMMM yyyy\",\r\n    ar: \"yyyy MMM d\",\r\n    he: \"yyyy MMM d\",\r\n  };\r\n\r\n  const localeCancelLabelMap = {\r\n    en: \"cancel\",\r\n    fr: \"annuler\",\r\n    ru: \"отмена\",\r\n    th: \"ยกเลิก\",\r\n    ja: \"キャンセル\",\r\n    ko: \"취소\",\r\n    zh: \"取消\",\r\n    ar: \"إلغاء\",\r\n    he: \"לְבַטֵל\",\r\n  };\r\n  const localeOkLabelMap = {\r\n    en: \"OK\",\r\n    fr: \"OK\",\r\n    ru: \"дать согласие\",\r\n    th: \"ตกลง\",\r\n    ja: \"同意\",\r\n    ko: \"동의하다\",\r\n    zh: \"同意\",\r\n    ar: \"يوافق على\",\r\n    he: \"לְהַסכִּים\",\r\n  };\r\n  const localeSettingLabelMap = {\r\n    en: \"setting\",\r\n    fr: \"réglage\",\r\n    ru: \"параметр согласие\",\r\n    th: \"การตั้งค่า\",\r\n    ja: \"setting\",\r\n    ko: \"환경\",\r\n    zh: \"环境\",\r\n    ar: \"ضبط\",\r\n    he: \"הגדרה\",\r\n  };\r\n  const localeLaunguageLabelMap = {\r\n    en: \"Language\",\r\n    fr: \"Langue\",\r\n    ru: \"параметр согласие\",\r\n    th: \"ภาษา\",\r\n    ja: \"言語\",\r\n    ko: \"환경\",\r\n    zh: \"环境\",\r\n    ar: \"ضبط\",\r\n    he: \"הגדרה\",\r\n  };\r\n  const localeTimezoneLabelMap = {\r\n    en: \"TimeZone\",\r\n    fr: \"fuseau horaire\",\r\n    ru: \"часовой пояс\",\r\n    th: \"ไทม์โซน\",\r\n    ja: \"タイムゾーン\",\r\n    ko: \"환경\",\r\n    zh: \"环境\",\r\n    ar: \"ضبط\",\r\n    he: \"אזור זמן\",\r\n  };\r\n  const localeNumberFormatMap = {\r\n    en: \"OK\",\r\n    fr: \"OK\",\r\n    ru: \"дать согласие\",\r\n    th: \"ตกลง\",\r\n    ja: \"同意\",\r\n    ko: \"동의하다\",\r\n    zh: \"zh\",\r\n    ar: \"ar-SA\",\r\n    he: \"OK\",\r\n  };\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [fullWidth, setFullWidth] = React.useState(true);\r\n  const [maxWidth, setMaxWidth] = React.useState('xs');\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // const handleTimezone = () => {\r\n  //   setOpen(false);\r\n  // };\r\n  const handleMaxWidthChange = (event) => {\r\n    setMaxWidth(\r\n      // @ts-expect-error autofill of arbitrary value is not handled.\r\n      event.target.value,\r\n    );\r\n  };\r\n\r\n  const handleFullWidthChange = (event) => {\r\n    setFullWidth(event.target.checked);\r\n  };\r\n\r\n  console.log(selectedTimezone);\r\n\r\n  const persianNumeral = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹']\r\n\r\n  return (\r\n    <div>\r\n      <MuiPickersUtilsProvider utils={localeUtilsMap[locale]} locale={localeMap[locale]}>\r\n        <ThemeProvider theme={materialTheme}>\r\n          <DatePicker\r\n            label=\"Start\"\r\n            value={startDate}\r\n            maxDate={today}\r\n            minDate=\"2019-01-01\"\r\n            // inputVariant=\"outlined\"\r\n            InputAdornmentProps={{ position: \"start\" }}\r\n            // format=\"MM/dd/yyyy\"\r\n            format={localeFormatMap[locale]}\r\n            cancelLabel={localeCancelLabelMap[locale]}\r\n            okLabel={localeOkLabelMap[locale]}\r\n            numberFormat={localeNumberFormatMap[locale]}\r\n            localeSettingLabel={localeSettingLabelMap[locale]}\r\n\r\n\r\n            // views={[\"year\", \"month\", \"day\"]}\r\n            // formatDate={(date) => moment(date).format('DD-MM-YYYY')}\r\n            onChange={(e) => {\r\n              // setStartDate(e.target.value)\r\n              setStartDate(dateFormat(e, \"yyyy/m/d\"))\r\n            }}\r\n            // variant=\"static\"\r\n            renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n\r\n          />\r\n          <DatePicker\r\n            label=\"End\"\r\n            value={endDate}\r\n            maxDate={today}\r\n            minDate=\"2019-01-01\"\r\n            // InputProps={{\r\n            //     endAdornment: (\r\n            //       <SvgIcon \r\n            //         aria-label=\"Select locale\"\r\n            //         onClick={handleMenuOpen}\r\n            //         aria-owns={anchorEl ? \"locale-menu\" : undefined}\r\n            //       >\r\n            //         <SettingsIcon />\r\n            //         </SvgIcon>\r\n            //     ),\r\n            //   }}\r\n\r\n            // inputVariant=\"outlined\"\r\n            format={localeFormatMap[locale]}\r\n            cancelLabel={localeCancelLabelMap[locale]}\r\n            okLabel={localeOkLabelMap[locale]}\r\n            onChange={(e) => {\r\n              // setEndDate(e.target.value)\r\n              setEndDate(dateFormat(e, \"yyyy/m/d\"))\r\n            }}\r\n            // variant=\"static\"\r\n            renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n          />\r\n\r\n          <Button variant=\"outlined\" color=\"blank\" onClick={handleClickOpen}>\r\n            <SettingsIcon />\r\n          </Button>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"Select locale\"\r\n            aria-describedby=\"Select locale\"\r\n            fullWidth={fullWidth}\r\n            maxWidth={maxWidth}\r\n            className={classes.dialog}\r\n          >\r\n            <DialogTitle id=\"Select locale\">{localeSettingLabelMap[locale]}</DialogTitle>\r\n            <DialogContent\r\n              position=\"static\">\r\n              <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                <Tab label={localeLaunguageLabelMap[locale]} {...a11yProps(0)} />\r\n                <Tab label={localeTimezoneLabelMap[locale]} {...a11yProps(1)} />\r\n              </Tabs>\r\n              <TabPanel value={value} index={0}>\r\n                    <input\r\n                      style={{ width: \"80%\", height: 35, borderRadius:5 ,fontSize:'1.0rem'}}\r\n                      value={localeLaunguageLabelMap[locale]}\r\n                      onClick={handleMenuOpen}\r\n                    />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={1}>\r\n                    <div className={\r\n                      classes.timezoneSelect}>\r\n                      <TimezoneSelect\r\n                        value={selectedTimezone}\r\n                        onChange={setSelectedTimezone} \r\n                        style={{ width: '100%', height: 35 }}\r\n                      />\r\n                    </div>\r\n              </TabPanel>\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                {localeCancelLabelMap[locale]}\r\n              </Button>\r\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                {localeOkLabelMap[locale]}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Menu\r\n            id=\"locale-menu\"\r\n            anchorEl={anchorEl}\r\n            open={Boolean(anchorEl)}\r\n            onClose={() => setAnchorEl(null)}\r\n          >\r\n            {Object.keys(localeMap).map(localeItem => (\r\n              <MenuItem\r\n                key={localeItem}\r\n                selected={localeItem === locale}\r\n                onClick={() => selectLocale(localeItem)}\r\n              >\r\n                {localeItem}\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        </ThemeProvider>\r\n      </MuiPickersUtilsProvider>\r\n      {/* Chart */}\r\n      <ReactEcharts\r\n        option={\r\n          ScoreChartTemplate({ startDate, endDate })\r\n        }\r\n        style={{ height: 500, width: 700 }}\r\n      />\r\n    </div>\r\n  );\r\n}",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":15,"column":8,"nodeType":"48","messageId":"49","endLine":15,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":27,"column":8,"nodeType":"48","messageId":"49","endLine":27,"endColumn":16},{"ruleId":"46","severity":1,"message":"51","line":29,"column":10,"nodeType":"48","messageId":"49","endLine":29,"endColumn":20},{"ruleId":"46","severity":1,"message":"52","line":30,"column":8,"nodeType":"48","messageId":"49","endLine":30,"endColumn":32},{"ruleId":"46","severity":1,"message":"53","line":32,"column":8,"nodeType":"48","messageId":"49","endLine":32,"endColumn":15},{"ruleId":"46","severity":1,"message":"54","line":34,"column":8,"nodeType":"48","messageId":"49","endLine":34,"endColumn":20},{"ruleId":"46","severity":1,"message":"55","line":35,"column":10,"nodeType":"48","messageId":"49","endLine":35,"endColumn":20},{"ruleId":"46","severity":1,"message":"56","line":41,"column":8,"nodeType":"48","messageId":"49","endLine":41,"endColumn":25},{"ruleId":"46","severity":1,"message":"57","line":43,"column":10,"nodeType":"48","messageId":"49","endLine":43,"endColumn":23},{"ruleId":"46","severity":1,"message":"58","line":43,"column":25,"nodeType":"48","messageId":"49","endLine":43,"endColumn":34},{"ruleId":"46","severity":1,"message":"59","line":45,"column":13,"nodeType":"48","messageId":"49","endLine":45,"endColumn":21},{"ruleId":"46","severity":1,"message":"60","line":48,"column":8,"nodeType":"48","messageId":"49","endLine":48,"endColumn":14},{"ruleId":"46","severity":1,"message":"61","line":53,"column":8,"nodeType":"48","messageId":"49","endLine":53,"endColumn":14},{"ruleId":"46","severity":1,"message":"62","line":54,"column":10,"nodeType":"48","messageId":"49","endLine":54,"endColumn":16},{"ruleId":"46","severity":1,"message":"63","line":54,"column":18,"nodeType":"48","messageId":"49","endLine":54,"endColumn":23},{"ruleId":"46","severity":1,"message":"64","line":89,"column":7,"nodeType":"48","messageId":"49","endLine":89,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":449,"column":5,"nodeType":"67","messageId":"68","endLine":451,"endColumn":6},{"ruleId":"46","severity":1,"message":"69","line":621,"column":9,"nodeType":"48","messageId":"49","endLine":621,"endColumn":29},{"ruleId":"46","severity":1,"message":"70","line":628,"column":9,"nodeType":"48","messageId":"49","endLine":628,"endColumn":30},{"ruleId":"46","severity":1,"message":"71","line":634,"column":9,"nodeType":"48","messageId":"49","endLine":634,"endColumn":23},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'MoreIcon' is defined but never used.","'IconButton' is defined but never used.","'SelectTimezoneMaterialUi' is defined but never used.","'SvgIcon' is defined but never used.","'NumberFormat' is defined but never used.","'intlFormat' is defined but never used.","'DialogContentText' is defined but never used.","'timezoneNames' is defined but never used.","'ZonedDate' is defined but never used.","'ReactDOM' is defined but never used.","'AppBar' is defined but never used.","'Select' is defined but never used.","'height' is defined but never used.","'width' is defined but never used.","'useStyles' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getDatePickerHeaderText'.","MethodDefinition","unexpected","'handleMaxWidthChange' is assigned a value but never used.","'handleFullWidthChange' is assigned a value but never used.","'persianNumeral' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]